// <auto-generated />
using System;
using BoardTroveAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoardTroveAPI.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20250729195324_linkTables")]
    partial class linkTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoardTroveAPI.Models.BasePost", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("post_type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("post_type").HasValue("BasePost");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BoardTroveAPI.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PfpLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BoardTroveAPI.Models.FENPost", b =>
                {
                    b.HasBaseType("BoardTroveAPI.Models.BasePost");

                    b.Property<string>("FEN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("FEN");
                });

            modelBuilder.Entity("BoardTroveAPI.Models.PGNPost", b =>
                {
                    b.HasBaseType("BoardTroveAPI.Models.BasePost");

                    b.Property<string>("PGN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("PGN");
                });

            modelBuilder.Entity("BoardTroveAPI.Models.BasePost", b =>
                {
                    b.HasOne("BoardTroveAPI.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardTroveAPI.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
